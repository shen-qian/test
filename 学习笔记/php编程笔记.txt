增
	方法一：insert into <表名>(字段1,字段2,...) values(值1,值2,...)
	方法二：insert into <表名>(字段1,字段2,...) select(导入字段1,导入字段2,...) from <数据表源>
删
	方法一：delete from where <筛选条件>
	方法二：truncate from <表名> //删除整改表里面的数据
查
	select all/distinct 字段/表达式列表 [form子句] [where子句] [group by子句] [having子句] [order by子句] [limit子句]
	all/distinct: 所有数据/不重复数据
	字段/表达式列表：来源于表的字段/运算式、方法
	from: 选择某个表, from <表名>
	where: 筛选数据, where <筛选条件>
	<筛选条件>：1.算术云算符（+、-、=、>、.....） 2.XX is null/not null/ture/false; 3.XX between N1 and N2; 4.XX in(N1,N2,...)
				5.XX like "%NN%"/"NN_"（'%'为任意个字符，'_'为一个字符）
	group by: group by 字段1 desc/asc,字段2 desc/asc,...
	desc/asc: 倒序排列/正序排列
	having: 依赖于group by,对分组后的数据进行筛选, having <筛选条件>
	order by：对取得的数据进行排序, order by 字段1 desc/asc,字段2 desc/asc,....
	limit: 限制输出的数据量, limit 起始行,输出数量
改
	updata <表名> set(字段1=新值1,字段2=新值2,...) where <筛选条件>
	
----------------------------------------------------------------------------------------------------------------------

交叉连接--没有条件的连接
	select * from <表1>,<表2>
	select * from <表1> join <表2>
内连接
	select <表1>.*,<表2>.字段 from <表1> [inner] join <表2> on <筛选条件> 
	<筛选条件>：<表1>.字段1=<表2>.字段1
	标的替代符：<表名> as 字符
左连接
	select * from <表1> left join <表2> on <筛选条件>
右连接
	select * from <表1> right join <表2> on <筛选条件>
全连接
	
连接查询
	select all/distinct 字段/表达式列表 
		from <内连接/左连接/右连接> 
			[where子句] [group by子句] [having子句] [order by子句] [limit子句];

-----------------------------------------------------------------------------------------------------------------------

子查询
	where XX 运算符 (select计算出的数据值)
表子查询
	where XX 运算符 (select表子查询)
行子查询
	where row(字段1,字段2,...) 运算符 (select行子查询) //每个字段一一对应子查询的结果集
列子查询
	where in(字段1,字段2,...) 运算符 (select列子查询)
标量子查询
	用单格数据值来筛选数据  where b>17;
	
子查询使用位置
	1.结果
	2.条件
	3.来源表

子查询常见用法
	1.in的子查询：XX in (列子查询) //等于其中一个
	2.any/some的子查询：XX 运算符 any (列子查询) //满足其中一个条件
	3.all的子查询：XX 运算符 all (列子查询) //满足所有条件集

union查询：将两个查询结果相结合
	select * from <表1> union select * from <表2>
	
-----------------------------------------------------------------------------------------------------------------------

事务
	set autocommit = 1;自动提交
	set autocommit = 0;手动提交
使用
	start transaction/begin -- 开启事务
		sql语句1
		sql语句2
	if(没有出错){
		commit; -- 提交执行效果
	}eles{
		rollback; -- 回滚到开启事务状态
	}

-----------------------------------------------------------------------------------------------------------------------

流程控制语句
	1.  [标识符] if <判断条件> then
			begin
				执行语句...
			end;
			elseif <判断条件> then
			begin
				执行语句...
			end;
			else begin
				执行语句...
			end;
		end if;
	--------------------------------
	2.  [标识符] case <变量值> 
			when <某值/某个条件> then
			begin
				执行语句...
			end;
			when <某值/某个条件> then
			begin
				执行语句...
			end;
			else begin
				执行语句...
			end;
		end case;
	--------------------------------
	3.	[标识符] loop
		begin
			循环执行语句...,直到...
			if <判断条件>
			begin
				leave 标识符; -- 离开loop循环
			end if;
			
		end loop;
	--------------------------------
	4.	set <创建变量>
		[标识符] while <判断变量条件> do -- 当<判断变量条件>为假时退出循环
		begin
			执行语句...
			操作变量...
		end while;
	--------------------------------
	5.	set <创建变量>
		[标识符] repart
		begin
			执行语句...
			操作变量...
		end;
		until <判断变量条件> -- 当<判断变量条件>为真时退出循环
		end repart;
	--------------------------------
	[标识符]：用来做控制语句块的结束语
	leave：用来做控制语句块的结束语

-----------------------------------------------------------------------------------------------------------------------

创建变量
	1. declare 变量名 类型 [default 默认值];
	2. set @变量名 = 值;
变量赋值
	1. set 变量名 = 值;		set @变量名 = 值;
	2. select @变量名 = 值;		select 值 into @变量名;

-----------------------------------------------------------------------------------------------------------------------

创建函数
	create function 函数名(p1 <字符类型>,p2 <字符类型>,...)
	retrun <返回类型>
	begin
		控制语句... -- 不可以使用select带有结果集的语句
	retrun <某个变量/某个值>; -- mysql的函数必须有返回值
	end;
	<新结束符>
cmd中执行函数要配合 delimiter <新结束符>，来完成函数输入

-----------------------------------------------------------------------------------------------------------------------

存储过程
	create procedure 存储过程名 ([in/out/inout] p1 <字符类型>,[in/out/inout] p2 <字符类型>,...)
	begin
		控制语句 -- 存储过程不会有返回值
	end;
	
-----------------------------------------------------------------------------------------------------------------------

php使用函数和存储过程
	使用函数 -- $sql = “insert  into  tab1  (id,  f2,  f3)  values ( null,  now(),  func1($v1 , $v2 )  )”;
	使用存储过程 -- $sql = “ call   insert_user($v1, $v2,  $v3 ); ”;  //输入3个数据
					$sql = “call  Get_User_Info( $id )  “; //获取id数据

-----------------------------------------------------------------------------------------------------------------------

触发器
	create trigger 触发器名 触发时间 触发事件 on 表名 for each row
	begin
		编码位置，触发器执行语句
	end;
	
	触发时间：before(在...之前)/after(在...之后)
	触发事件：insert/updata/delete
	触发器内部关键词"new"和"old"：变量=new.<字段>（insert/updata新数据的获取） 和 变量=old.<字段>（updata的旧数据的获取）
	
-----------------------------------------------------------------------------------------------------------------------

类的成员
	class <类名>{
		const 常量名=值;/ define(常量名,值) -- 常量定义
		var $属性名=值;/ public $属性名=值; -- 属性定义
		static $熟悉名=值; -- 静态属性，只会存在一个公共的值，
		function <方法名>($参数1,$参数2,...){ 方法内容... } -- 普通方法定义
		static function <方法名>($参数1,$参数2,...){ 方法内容... } -- 静态方法定义，只能用类来调用
		function __consturct($参数1,$参数2,...){ -- 构造方法直接带参数定义属性
			$this->属性名1=$参数1;
			$this->属性名2=$参数2;
			.
			.
			.
		}
		function __destruct(){ 析构方法内容... } -- 析构方法不带参数，且在类销毁时自动执行，没办法手动调用
	}
	
调用方法
	<类名>::常量名 -- 类中常量的调用
	$对象->属性名 -- 类中属性调用
	<类名>::静态属性名 -- 静态属性调用
	$对象-><方法名> -- 类中方法的调用
	<类名>::<静态方法名> -- 类中静态方法的调用
	$对象=new <类名>($参数1,$参数2,...); -- 构造参数的使用
	
-----------------------------------------------------------------------------------------------------------------------

继承
	class A extends B{ 属性和方法的定义 }
访问控制修饰符
	public <属性名/常量名/方法> -- 访问权限 1.类内部 2.继承类内部 3.类外部
	protected <属性名/常量名/方法> -- 访问权限 1.类内部 2.继承类内部
	private <属性名/常量名/方法> -- 访问权限 1.类内部

父类
	parent -- 指代被继承的对象
使用
	class A{};
	class B extends A{内容...};
	A::<内容...>; 等于 parent::<内容...>; -- 调用父类的实例方法
对比
	parent：代表父类（这个类）
	self：代表当前所在的类
	$this：代表调用当前方法的对象
	使用位置：都在方法中使用
	
-----------------------------------------------------------------------------------------------------------------------

覆盖：子类对继承自父类的属性、方向进行重新定义

-----------------------------------------------------------------------------------------------------------------------

工厂模式
	class factory{
		static function getObj($className){
			$boj = new $className();
			return $obj;
		}
	}
	$obj1 = factory::getObj('A');
单例模式 -- 
	class single{
		private function __construct(){}
		static private $instance = null;
		static function getObj(){
			if(empty(self::$instance)){
				self::$instance = new self();
				return self::$instance;
			}else{
				return self::$instance;
			}
		}
	}
	$obj1 = single::getObj();
	$obj2 = single::getObj();
	
类的克隆私有化 -- 在克隆对象时，单例类中自有的"__clone"方法会被调用，克隆出另一个类，单例模式被破坏
	private function __clone() {} -- 将克隆方法私有化，什么都不执行
	
-----------------------------------------------------------------------------------------------------------------------

MySQL操作类
	class MySQLDB{
		function __construct($host,$port,$user,$pass,$charset,$dbname){
			$mysqli = new mysqli();
			$mysqli->connect("$host:$port","$user","$pass");
			if(mysqli_connect_error()){
				die("连接失败");
			}
			$mysqli->query("set names $charset");
			$mysqli->query("use $dbname");
		}
		function charset($charset){
			$mysqli->query("set names $charset");
		}
		function selectDB($dbname){
			$mysqli->query("use $dbname");
		}
		function closeDB(){
			$mysqli->close();
		}
	}

-----------------------------------------------------------------------------------------------------------------------

抽象类/抽象方法 -- 使用于管理过程，定义个类的结构用于下面的人去继承实现具体的方法、类
	abstract class <类名>{
		属性定义;
		//抽象方法
		abstract function <方法名>(参数1,参数2,...);
	}

-----------------------------------------------------------------------------------------------------------------------

魔术方法 -- 属性重载
	1. __GET($属性名){}; -- 在对一个对象不存在的属性取值时调用这个方法
	2. __SET($属性名){}; -- 在对一个对象不存在的属性赋值时调用这个方法
	3. __ISSET($属性名,值){}; -- 当对一个对象的不存在的属性进行isset()判断的时候，就会自动调用这个方法
	4. __UNSET($属性名){}; -- 当对一个对象的不存在的属性进行unset()销毁操作的时候，就会自动调用这个方法

-----------------------------------------------------------------------------------------------------------------------

接口 -- 只有常量和抽象方法的类
	interface <接口名> {
		常量1;
		常量2;
		.
		.
		抽象方法1;
		抽象方法2;
		.
		.
	}
	
接口使用
	class <类名> implements <接口1>,<接口2>{
		类的定义...
	}

接口继承
	interface <接口1> extends <接口2>{
		接口的成员定义...
	}

-----------------------------------------------------------------------------------------------------------------------

自动加载类 -- 用于将类单独存储于一个文件里，调用时自动加载相对应文件的类
	function __autoload($className){
		require_once "./".$className.".class.php";
	}
	$a = new A(); -- 创建一个A对象时，会自动调用 ‘__autoload’方法，找到相应文件加载类

自定义自动加载 -- 定义多个加载方法，可以在遍历多个文件夹找相应的加载文件
	sql_autoload_register("函数1");
	sql_autoload_register("函数2");
	
	function <函数1>($className){
		加载语句... -- 可以是在class文件夹下载入文件
	}
	function <函数2>($className){
		加载语句... -- 可以是在lib文件夹下载入文件
	}

-----------------------------------------------------------------------------------------------------------------------

对象的遍历
	foreach($对象 as $key = $value){
		$key:指的是对象的可访属性（涉及属性权限问题），static不可遍历
		$value = 是相对应的值
	}

-----------------------------------------------------------------------------------------------------------------------

内置标准类
	class stdClass{} -- 一个什么都没有的内置类，主要用于存储临时数据
	
转换对象类型
	$<对象名> = (object)$<变量名>;

-----------------------------------------------------------------------------------------------------------------------

序列化 -- 将变量转成字符串形式，存储在某个文件中
	$<变量名> = 变量值;
	$<对象名> = <对象> -- 对象也可以序列化，调用"__sleep"方法
	$str1 = serialize($<变量名>/$<对象名>); -- 转为字符串
	file_put_contents("文件的位置",$str1); -- 存入相应文件
	
反序列化 -- 将文件中的数据读取出来，存储在变量中
	$str1 = file_get_contents("文件的位置");
	$<变量名> = unserialize($str1);

魔术方法"__tostring" -- 当对象被当做字符串来使用时，会自动调用这个方法，转为字符串输出，需要手动定义
	function __tostring(){
		$str = 对象->属性1;
		$str .= 对象->属性2;
		$str .= 对象->属性3;
		return $str;
	}

-----------------------------------------------------------------------------------------------------------------------
	
与类有关的魔术常量
	__DIR__:类所在的文件夹位置
	__FILE__:类所在的文件
	__LINE__:代码所处的行数
	__CLASS__:常量所处的类名
	__METHOD__:常量所处的方法名
	DIRECTORY_SEPARATOR:目录分隔符

与类有关的系统函数
	class_exists("类名"); -- 判断这个类是否存在
	interface_exists("接口名"); -- 判断这个接口是否存在
	get_class($obj); -- 获得该对象所属的类
	get_parent_class($obj); -- 获得该对象所属类的父类
	get_class_methods($obj); -- 获得该类的所有方法名，存储为数组
	get_class_var($obj); -- 获得该类的所有属性名，存储为数组
	get_declared_class(); -- 获得整改系统定义的类名
	
与对象有关的系统函数
	is_object($obj); -- 判断变量是否是对象
	get_object_var($obj); -- 获得该对象的所有属性名，存储为数组
	
-----------------------------------------------------------------------------------------------------------------------

禁止目录直接访问
	目录新建 .htaccess文件
	输入Deny from All

-----------------------------------------------------------------------------------------------------------------------

PDO的调用
	php7在php.ini文件里，打开（extension=php_bz2.dll,extension=php_curl.dll,extension=php_gd2.dll,extension=php_mbstring.dll,
							   extension=php_mysqli.dll,extension=php_pdo_mysql.dll,extension=php_pdo_sqlite.dll）
	这7个文件
	
PDO的连接
	$dsn = "mysql:host=localhost; port=3306; dbname=b1";
	$opt = array(PDO::MYSQL_ATTR_INIT_COMMAND => 'set names utf8');
	$pdo = new PDO($dsn, 'root', '123456', $opt);
	
PDO对象的使用
	$result = $pdo->query(返回结果集的sql语句) -- 执行有返回结果的语句
	$result = $pdo->exec(增删改的sql语句) -- 执行无返回值的语句
	$pdo->beginTransaction(); -- 开启一个事务
	$pdo->commit(); -- 提交一个事务
	$pdo->rollBack(); -- 回滚一个事务

PDO异常模式
	$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); -- 让pdo进入异常模式，必须使用
	try{
		$sql = "...";
		$result = $pdo->exec($sql); -- $result如果报错，直接跳转到catch执行，一下部分不再执行
		echo "执行成功！";
	}
	catch(Exception $e){
		echo "<p>发生错误";
		echo "<br/>错误代码：".$e->GetCode();
		echo "<br/>错误信息：".$e->GetMessage();
	}

PDO结果集对象
	$result = $pdo->exec($sql); -- $result为结果集对象
	$result->rowCount() ;	//得到结果集的行数
 	$result->columnCount() ;	//得到结果集的列数
 	$result->fetch( [返回类型] ); //从结果集中取出“一行”数据；
	[返回类型]有：
		1.PDO::FETCH_ASSOC -- 表示关联数组; 
		2.PDO::FETCH_NUM -- 表示索引数组; 
		3.PDO::FETCH_BOTH -- 表示前二者皆有，这是默认值;
		4.PDO::FETCH_OBJ -- 表示对象
	$result->fetchAll([返回类型]);一次性获取结果集中的所有数据，返回的是一个二维数组，相当于我们自己写的GetRows()
	$result->fetchColumn( [$i] );获取结果集中的“下一行”数据的第$i个字段的值，结果是一个“标量数据”
	$result->fetchObject();
	$result->errorCode();：pdo结果集的错误代号
	$result->errorInfo();  pdo结果集的错误信息（是一个数组）
	$result->closeCursor(); 关闭结果集（相当于mysql_close()  )

PDO预处理语法
	$sql = “select  *  from  tab   where  id = :v1  and  name  =  :v2 “;
	$stmt = $pdo->prepare( $sql ); -- 预处理该语句
	$stmt->bindValue(":v1","数值1"); -- 赋值
	$stmt->bindValue(":v2","数值2"); -- 赋值
	$stmt->execute(); -- 执行语句

-----------------------------------------------------------------------------------------------------------------------














	
	